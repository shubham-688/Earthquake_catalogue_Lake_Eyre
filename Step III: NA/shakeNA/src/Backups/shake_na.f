c*************************************************************************
c
c      program shake_na
c
c      Seismology Group, Research School of Earth Sciences
c      The Australian National University
c
c     Non-linear inversion scheme for earthquake location using a
c     directed grid search.
c
c     combines 
c	Program NA  - sampling a parameter space
c		      using a Neighbourhood algorithm
c     and 
c       Shake       - using iasp software for traveltime calculation
c
c
c----------------------------------------------------------------------*------*
c
c     NA component-
c					MEMORY AND ARRAY SIZES
c
c					The NA routines use the
c					following include file to define
c					all parameters controlling
c					memory required by the arrays.
c
c	include 	'na_param.inc'
c
c					A description of each parameter,
c					indicating which ones should be 
c					changed to fit your application
c					can be found in 'na_param.inc' 
c
c
c					INPUT AND OUTPUT
c       Input files:
c                   na.in       	Contains options for Neighbourhood 
c					algorithm (see HTML manual)
c
c       Output files:
c                   na.sum      	summary of results
c
c                   na.nad      	NAD (NA direct access file of models)
c
c                   sobol.coeff 	initializing data used for
c                               	quasi-random sequences
c					(This is output for reference only)
c
c       Comments:
c                The NAD file is a direct access compact format file
c                containing all models generated by the neighbourhood
c                algorithm. (NAD files can be read in by multi-dimensional
c                integration program NA-Bayes and plot program S-plot.)
c
c		 Logical units 30-40 are reserved for use by NA subroutines
c		 The user specific routines should not use these values
c		 for logical units.
c		 The NA routines also write to LU 6 as standard out.
c
c
c					M. Sambridge, Sept  1999 (RSES, ANU)
c                                            version1 April 1998
c----------------------------------------------------------------------*------*
c  SHAKE component:
c
c     Uses Buland tau-p based travel time procedures
c     to improve computational efficiency
c
c
c     AUTHORS:  Brian L.N. Kennett (RSES,ANU)
c               March 1990, January 1999 for shakeNA
c
c     The routines build on the work of Genet M. Edmonson in January 1987     
c     who modified the program JANET by M.S. Sambridge designed for
c     locating local earthquakes for use in a spherical geometry with 
c     teleseismic arrivals.
c
c
c
c*************************************************************************
c
	Program shake_na
c
	include 	'na_param.inc'
c
c					Call NA routine to do the work		
	call na

	stop
	end

c----------------------------------------------------------------------*------*

c Basic subroutines linking to NA main program
c
c	user_init - defines parametrization and can be
c		    used to perform any user initialization 
c		    (e.g. reading in data etc.) 
c
c	forward   - performs forward modelling on an input model
c		    and returns the misfit value of that model.
c
c	writemodels - a routine called after the NA has completed.
c		      All models and misfits are supplied 
c		      to the routine and here the user may write  
c		      then out in their own format.
c		      (Note that the NA routines only write the
c		       models out in a direct access NAD file.
c		       see HTML manual for details.)
c
c    outlines written by M. Sambridge April 1998
c    adapted to shakeNA by B.L.N. Kennett January 1999
c
c----------------------------------------------------------------------*------*
c
c	user_init - performs all user specific initialization tasks. 
c		       In this case for receiver receiver function inversion.
c
c	Input: - none
c
c	Output:
c	      nd		:Number of dimensions in parameter space
c	      ranges(2,nd)	:bounds on parameter space
c	      scales(nd+1)	:scale factors in parameter space
c
c	Comments:
c		 The scale factors are used to transform the model
c		 parameter space into a non-dimensional space. They 
c		 must be provided by the user to put each parameter
c		 on an equal footing.  In the transformation
c		 the i-th parameter becomes,
c		
c		 xi_after = (xi_before-ranges(1,i))/scales(i+1).
c
c		 Note that scales(i+1) contains the scale factor for 
c		 the i-th parameter. The value of scales(1) can be used 
c		 as a shortcut to indicate common choices for scale 
c		 factors. If scales(1) = 0 then all scale factors are
c		 reset to 1; if scales(1) = -1 then the scale factors 
c		 are reset to the parameter range, i.e.,
c
c		 scales(i+1) = ranges(2,i)-ranges(1,i)
c
c		 and for any other value scales in left unchanged.
c		 Therefore if scales(1) is set to 0 or -1 then there is
c		 no need to set the scales array.
c
c				M. Sambridge, RSES (ANU), April 1998. 
c
c-------------------------------------------------------------------------
c
	subroutine user_init(nd,ranges,scales)
c
c----------------------------------------------------------------------*------*
c
c     CONSTANTS
c
      integer EVT, STAT, RUN, STOUT, RES, TABL
c
      parameter (RUN=15, STOUT=6, EVT=17, STAT=18, RES=19, TABL=11)
c
c     STOUT   unit number of shake output file
c     EVT     unit number of file containing data about quake
c     STAT    unit number of file containing information about stations
c     RUN     unit number of file containing run information
c     RES     unit number of file for auxiliary results
c
*----------------------------------------------------------------------*------*
c
c     COMMON BLOCK DECLARATIONS
      include 'shakcom.inc'
c
      common /shk_com/ lat,lon,dep,sec,jgl,cjgl
      integer jgl
      character*2  cjgl
      real  LAT(2), LON(2), DEP(2), SEC(2)
c
c     LAT, LONG, DEP    bounds for location of hypocentre
c     SEC               time bound for hypocentre
c     cjgl              used for choice of residual statistic
c                       (GAussian,JEffreys,L1)
c
*----------------------------------------------------------------------*------*
c
c     VARIABLES
c
      character*30  cfile
      character*20 modnam
c
      real temp
c
c     cfile             used for file names
c     modnam            name for travel time tables 
c                       (modnam.hed,modnam.tbl)
c
c     temp             temporary variable     
c
*----------------------------------------------------------------------*------*
c
c						Info and Logical unit common 
c						blocks used by NA routines
c
        common /NA_IO/lu_na,lu_out,lu_sum,lu_det,lu_sob,lu_dis
c
c
        real*4          ranges(2,4),
     &                  scales(5)
        real laterr, lngerr
c
      open(15,file='shna.cmd',status='unknown')
c
c     SET UP DATA FILES:
c     file containing run information           unit number 15
c     principal output                          unit number 6
c     file containing  event data               unit number 17
c     file containing station data              unit number 18
c     file for auxiliary results                unit number 19
c     travel tables for earth model 'model'     unit number 11
c       (model.hed, model.tbl)
c                                         read model name
      read(RUN,fmt='(A)') modnam
c                                         read keyword for phase
c                                         selection
      read(RUN,fmt='(A)') phlst(1)
      read(RUN,fmt='(A)') phlst(2)
c 
c                                         read choice of Residual Statistic   
      read(RUN,fmt='(A)') cjgl
      if(cjgl.eq.'JE') then
        jgl = 2
      elseif(cjgl.eq.'L1') then
        jgl = 3
      else
        jgl = 1
      endif 
      write(6,*) 'Residual Statistic:',cjgl
c                                         read name of event file
      read(RUN,fmt='(A)') cfile     
      open(UNIT=EVT, FILE=cfile)
      rewind(EVT)
c                                         read name of station file
      read(RUN,fmt='(A)') cfile     
      open(UNIT=STAT, FILE=cfile)
      rewind(STAT)
c                                         read name of auxiliary results
c                                                      file
      read(RUN,fmt='(A)') cfile     
      open(UNIT=RES, FILE=cfile)
      rewind(RES)
c
c     OBTAIN QUAKE, STATION & RUN DATA
c
      write(STOUT,1000) '* INPUT'
      call input(STOUT, EVT, STAT, RUN, RES)
      write(STOUT,1000) 'OPEN travel time tables '
      prnt(1) = .false.
      prnt(2) = .false.
      prnt(3) = .true.
      phlst(3) = '   '
      call assign(20,2,'ttim1.lis',9)
      call tabin(TABL,modnam)
      call brnset(2,phlst,prnt)
c
c
c     OBTAIN ERRORS IN LOCATION OF QUAKE
c
*      read(run,*,ERR=999) laterr
*      read(run,*,ERR=999) lngerr
*      read(run,*,ERR=999) deperr
*      read(run,*,ERR=999) secerr
      read(run,*) laterr
      read(run,*) lngerr
      read(run,*) deperr
      read(run,*) secerr
      write(6,*) laterr,lngerr,deperr,secerr
c
c     CALCULATE BOUNDS
c
c     leave values >180, >60 etc and change at end of program
c
      LAT(1) = slat - laterr
      LAT(2) = slat + laterr
      LON(1) = slng - lngerr
      LON(2) = slng + lngerr
c
c     USE DIFFERENT DEPTHS TO TEST CONVERGENCE
c
      temp = sdep - deperr
      if (temp .le. 0.0) then
        DEP(1) = 0.0
      else
        DEP(1) = temp
      endif
      DEP(2) = sdep + deperr
      SEC(1) = ssec - secerr
      SEC(2) = ssec + secerr
c
c     ECHO BOUNDS
c
      write(stout,1004)
      write(stout,1003) 'Initial bounds on quake location:'
      write(stout,1005) 'MIN', 'MAX'
      write(stout,1006) 'LATITUDE', (LAT(i), i = 1, 2)
      write(stout,1006) 'LONGITUDE', (LON(i), i = 1, 2)
      write(stout,1006) 'DEPTH', (DEP(i), i = 1, 2)
      write(stout,1006) 'TIME (sec)', (SEC(i), i = 1, 2)
c
c       Open direct access tables for ellipticity corrections
      open(21,file='elcordir.tbl',access='direct',
     &     form='formatted',recl=80) 
c
*----------------------------------------------------------------------*------*
c
c     information required for NA algorithm
c
      nd = 4
c
      ranges(1,1) = LAT(1)
      ranges(2,1) = LAT(2)
      ranges(1,2) = LON(1)
      ranges(2,2) = LON(2)
      ranges(1,3) = DEP(1)
      ranges(2,3) = DEP(2)
      ranges(1,4) = SEC(1)
      ranges(2,4) = SEC(2)
c
      scales(1) = -1     
      scales(2) = LAT(2)-LAT(1)
      scales(3) = LON(2)-LON(1)
      scales(4) = DEP(2)-DEP(1)
      scales(5) = SEC(2)-SEC(1)
c
c*    write(6,*) nd
c*    write(6,*) ranges
c*    write(6,*) scales
      return
c
*----------------------------------------------------------------------*------*
c
c     FORMAT STATEMENTS
c
1000  format (1X, A)
1003  format (1X, A)
1004  format ()
1005  format (1X, T18, A, T28, A)
1006  format (1X, T3, A, T13, F8.3, T23, F8.3)
c
*----------------------------------------------------------------------*------*
c
999   write(stout,1003) 'ERROR on input (forward_init)'
	return
	end
c-------------------------------------------------------------------------
c
c	forward - performs forward modelling for user supplied problem.
c		  In this case it calculates predicted receiver function
c		  for a single model and calculates the misfit measure
c		  between observation and prediction.
c
c	Input: 
c	      nd		:Number of dimensions in parameter space
c	      model(nd)		:input velocity model
c
c	Output:
c	      lppd		:negative log(ppd)
c
c	Comments:
c		 This routine allows the user to perform the forward 
c		 modelling and define an a posterior probability density
c		 function using the resulting mismatch with the observed
c		 data. Note that the output quanity is the negative
c		 natural log of the ppd. This is equivalent to the 
c		 misfit function in most problems. 
c
c				M. Sambridge, RSES (ANU), April 1998. 
c
c
c--------------------------------------------------------------------- + ---- +
c
	subroutine forward(nd,model,lppd)
c
c----------------------------------------------------------------------*------*
c
c     CONSTANTS
c
      integer EVT, STAT, RUN, STOUT, RES, TABL
c
      parameter (RUN=15, STOUT=16, EVT=17, STAT=18, RES=19, TABL=11)
c
c     STOUT   unit number of shake output file
c     EVT     unit number of file containing data about quake
c     STAT    unit number of file containing information about stations
c     RUN     unit number of file containing run information
c     RES     unit number of file for auxiliary results
c
*----------------------------------------------------------------------*------*
c
c     COMMON BLOCK DECLARATIONS
      include 'shakcom.inc'
c
      common /shk_com/ lat,lon,dep,sec,jgl,cjgl
      integer jgl
      character*2  cjgl
      real  LAT(2), LON(2), DEP(2), SEC(2)
c
c     LAT, LONG, DEP    bounds for location of hypocentre
c     SEC               time bound for hypocentre
c     cjgl              used for choice of residual statistic
c                       (GAussian,JEffreys,L1)
c
*----------------------------------------------------------------------*------*
c
c     VARIABLES
c
      real    x, y, z
      real    t
c
c     x, y, z   lat, long, depth of source
c     t         origin time 
c
c
*----------------------------------------------------------------------*------*
c
c						Info and Logical unit common 
c						blocks used by NA routines
c
        common /NA_IO/lu_na,lu_out,lu_sum,lu_det,lu_sob,lu_dis
c
        real*4          lppd
        real*4          misfitval
        real*4          model(nd)
c
*----------------------------------------------------------------------*------*
c
        x = model(1)
        y = model(2)
        z = model(3)
        t = model(4)
c
        misfitval = cstaq(stout, jgl, t, x, y, z)
c*        misfitval = cstaqke(stout, jgl, t, x, y, z)
        lppd = misfitval
c          
	return
	end
c
c-------------------------------------------------------------------------
c
c	writemodels - user supplied routine to write out models produced
c		      by Neighbourhood algorithm in user's own format.
c
c	Input: 
c	      nd		  :number of dimensions in parameter space
c	      ntot		  :number of models generated by NA 
c	      models(nd,ntot)     :models generated by NA
c	      misfit 		  :array of model misfits (-lppd's)
c	      ns1  		  :initial sample size used by NA
c	      ns2  		  :normal sample size used by NA
c	      itmax  		  :number of iterations
c	      nh_max  		  :maximum length of nad file header 
c
c	Output: - none
c	      nh  		  :length of nad file header 
c	      header(nh)  	  :character string containing nad file header
c
c	Comments:
c	         This routine allows the user to write out the models
c		 produced by the NA in their own format. The three 
c		 parameters ns1, ns2 and itmax define the samples sizes
c		 and number of iterations taken by the NA. Initially ns1
c		 random samples are generated, and then itmax sets of ns2
c		 models are generated and so ntot = ns1 + ns2*itmax. 
c
c				M. Sambridge, RSES (ANU), April 1998. 
c
c-------------------------------------------------------------------------
c
	subroutine writemodels
     &             (nd, ntot, models, misfit, ns1, ns2, itmax,
     &              nh_max, nh, header)

c
c----------------------------------------------------------------------*------*
c
c     CONSTANTS
c
      integer EVT, STAT, RUN, STOUT, RES, TABL
c
      parameter (RUN=15, STOUT=16, EVT=17, STAT=18, RES=19, TABL=11)
c
c     STOUT   unit number of shake output file
c     EVT     unit number of file containing data about quake
c     STAT    unit number of file containing information about stations
c     RUN     unit number of file containing run information
c     RES     unit number of file for auxiliary results
c
*----------------------------------------------------------------------*------*
c
c     COMMON BLOCK DECLARATIONS
      include 'shakcom.inc'
c
      common /shk_com/ lat,lon,dep,sec,jgl,cjgl
      integer jgl
      character*2  cjgl
      real  LAT(2), LON(2), DEP(2), SEC(2)
c
c     LAT, LONG, DEP    bounds for location of hypocentre
c     SEC               time bound for hypocentre
c     cjgl              used for choice of residual statistic
c                       (GAussian,JEffreys,L1)
c
*----------------------------------------------------------------------*------*
c
c						Info and Logical unit common 
c						blocks used by NA routines
c
        common /NA_IO/lu_na,lu_out,lu_sum,lu_det,lu_sob,lu_dis
c
        real*4          models(nd,*)
        real*4          misfit(ntot)
        real*4          mfitmin
        real*4          mfitminc
        real*4          mfitmean
c
        open(16,file="shnamod.out")
        lu_mod = STOUT
c                                               at each iteration
        write(lu_mod,800) cjgl
        write(lu_mod,*)
        mfitmin = misfit(1)
        ns = ns1
        np = 0
        mopt = 1
        do it=1,itmax+1
           mfitminc = misfit(np+1)
           mfitmean = 0.0
           do i=1,ns
              jj = np + i
              if(misfit(jj).lt.mfitmin)then
                 mfitmin = misfit(jj)
                 mopt = jj
              end if
              mfitminc = min(mfitminc,misfit(jj))
              mfitmean = mfitmean + misfit(jj)
           end do
           mfitmean = mfitmean/ns
           write(lu_mod,801) it-1, mfitmin, mfitmean, mfitminc
           write(lu_mod,802)
           do i=1,ns
                jj = np + i
                write(lu_mod,803) i,
     &             models(1,jj),models(2,jj),models(3,jj),models(4,jj),
     &             misfit(jj)
           end do
           write(lu_mod,*)
           np = np + ns
           ns = ns2
        end do
c
       write(lu_mod,*) '* DISPLY'
c                                               optimum model.
c
         x = models(1,mopt)
         y = models(2,mopt)
         z = models(3,mopt)
         t = models(4,mopt)

c     DISPLAY SOLUTION
c
        lu_dsp = 6
        call displn(lu_mod,RES,jgl, LAT, LON, DEP, SEC, x, y, z, t)
        call displn(lu_dsp,RES,jgl, LAT, LON, DEP, SEC, x, y, z, t)
c*      call displke(lu_mod,RES,jgl, LAT, LON, DEP, SEC, x, y, z, t)
c
        write(lu_mod,*)
c
 800      format( 'shakeNA:',5x,a2)
 801      format( 'iteration:',i5,',  misfit: min=',f10.5,
     &             ', mean=',f10.5,', minc=',f10.5 /)
 802      format( 6x,'lat',7x,'lon',7x,'dep',7x,'sec',7x,'misfit')
 803      format(i3,5f10.3)
        return
        end
c

*--------------------------------------------------------------------- + ---- +
c DISPLAY ROUTINES
*--------------------------------------------------------------------- + ---- +
c                                                                     displn
      subroutine displn (stout, res, jgl,
     &                   LA, LN, D, S, lt, lg, dp, sc)
c
c     AUTHOR:  Genet M. Edmondson  RSES, ANU
c     DATE:    January 1987 
c     MODIFIED: B.L.N. Kennett March 1990  
c               to allow for changes to residual calculation
c               B.L.N. Kennett May 1991
c               to include slowness, azimuth data
c               B.L.N. Kennett Jan 1999 
c               shakeNA display
c     PURPOSE:
c     * displays results from shake program
c
c     Subroutines and functions required:
c       cstaq - returns residual statistic for given location
c       (ydist, trtm, obst, month - used by cstat)
c
*----------------------------------------------------------------------*------*
c
c     PARAMETERS
c
      integer stout, res
c
      real    LA(*), LN(*), D(*), S(*)
      real    lt, lg, dp, sc
c
c     stout   unit number of standard output file
c     res     unit number of file to output results to
c     jgl     index for Residual Statistic
c     LA, LN, D, S
c             bounds on hypocentre location
c     lt, lg, dp, sc
c             hypocentre location
c
*----------------------------------------------------------------------*------*
c
c     COMMON BLOCK DECLARATIONS
      include 'shakcom.inc'
c
*----------------------------------------------------------------------*------*
c
c     VARIABLES
c
      integer  i, jgl
      integer  tmp, tmpmin, tmphrs
      integer  carmin, carhr
      integer  nc, charcn
c
      real     calct, delta, bazim
      real     tmpsec
      real     carsec
      real     resqkp, ressrc
      character*2 cjgl
c
c     i       loop counter
c     jgl     index for residual statistic
c     tmp etc temporary variables
c     carsec, carmin, carhr
c             calculated arrival times at stations
c     calct   theoretical travel time from source to receiver
c     delta   angular distance from source to receiver
c     trash   dummy variable
c     resqkp  residual statistic for results from shake program
c     ressrc  residual statistic for approx source
c
*----------------------------------------------------------------------*------*
c
c     FUNCTIONS
c
      real    cstaq
c
c     cstaq - returns residual statistic
c
*----------------------------------------------------------------------*------*
c
c
c                                    Find residual statistics
      resqkp = cstaq(stout, jgl, sc, lt, lg, dp)
      ressrc = cstaq(stout, jgl, ssec, slat, slng, sdep)
c     
      If(jgl.eq.3) cjgl = "LI"      
      If(jgl.eq.2) cjgl = "JE"      
      If(jgl.eq.1) cjgl = "GA"      
c
      write(stout,1000) 'SOLUTION',cjgl
      write(stout,1001) source
      write(stout,1002) 'DATE:'
      write(stout,1003) 'Year', syr, syr
      write(stout,1004) 'Month', smo, smo
      write(stout,1005) 'Day', sday, sday
      write(stout,1005) 'Hour', shr, shr
      write(stout,1005) 'Minute', smin, smin
      write(stout,1006) 'Second', sc, ssec
      write(stout,1002) 'LOCATION:'
      write(stout,1008) 'Latitude', lt, slat
      write(stout,1008) 'Longitude', lg, slng
      write(stout,1008) 'Depth', dp, sdep
      write(stout,1009) 'RESIDUAL:', resqkp, ressrc
   
c
c     CALCULATE & ECHO ARRIVAL TIMES AT STATIONS FOR ORIGIN
c     AT CALCULATED SOLUTION
c
      rslat = (90.-lt)*0.017453292
      call ellref(rslat)
      write(stout,1012) 'Arrival Times for estimated hypocentre'
      write(stout,1015)
c                                 all main phases 
      call depset(dp,usrc)
      numtaz = numtim+numazi
      do 10, i = 1, numevt
      nc = charcn(evphcd(i))
c
c       CALCULATE TRAVEL TIME FROM SOLUTION TO STATION
c
        call ydist(lt, lg, stlat(evind(i)), stlong(evind(i)),
     ^             delta, cazim, bazim)
        call trtm(delta, MAXTT, n, tt,dtdd,dtdh,dddp,phcd)
        cazim = cazim+180.
        if(cazim.gt.360.) cazim = cazim-360.
        do 23 m=1,n
 23      continue
        if(nc.eq.1.and.evphcd(i)(1:1).eq.'P') then
          calct = tt(1)
          calcp = dtdd(1)
          write(res,*) i,' fast P'
        else
          do 21 l=1,n
            if(evphcd(i)(1:nc).eq.phcd(l)(1:nc)) then
              calct = tt(l)
              calcp = dtdd(l)
              write(res,*) i,nc,'  ',evphcd(i)
              go to 22
            endif
 21       continue
        endif
c
c       CALCULATE ACTUAL ARRIVAL TIME AT STATION
c       NB: this only takes into account crossing day, month and
c           year boundaries
c
c       tmpsec = ssec + calct
 22     continue
        edist = delta*0.017453292
        bazr = bazim*0.017453292
        call ellcor(edist, bazr, z, evphcd(i)(1:nc), etcor)
        calct = calct+etcor
        tmpsec = sc + calct
        tmpmin = tmpsec / 60
        carsec = tmpsec - (tmpmin * 60)
        tmp = smin + tmpmin
        tmphrs = tmp / 60
        carmin = tmp - (tmphrs * 60)
        carhr = shr + tmphrs
        if (i.le.numtim) then
          residf = obst(stout,sc,i)-calct
          write(stout,1016) evstcd(i),evphcd(i),evtmhr(i),evtmmi(i),
     &          evtmsc(i),residf,carhr,carmin,carsec,delta,bazim,calcp
        elseif (i.gt.numtim .and. i.le.numtaz) then
          resaz =  evtazi(i)-cazim         
          write(stout,1017) evstcd(i),evphcd(i),
     &         evtazi(i),resaz,cazim,delta,bazim
        elseif (i.gt.numtaz) then
          resslo =  evtslo(i)-calcp
          write(stout,1017) evstcd(i),evphcd(i),
     &         evtslo(i),resslo,calcp,delta,bazim
        endif
c
10      continue
c
*----------------------------------------------------------------------*------*
c
c     FORMAT STATEMENTS
c
1000  format (1X, T15, 'HYPOCENTRE ', A, T40, A)
1001  format (1X, T15, 'ShakeNA program', T40, A)
1002  format (1X, T3, A, A)
1003  format (1X, T5, A, T15, I4, T40, I4)
1004  format (1X, T5, A, T15, A, T40, A)
1005  format (1X, T5, A, T15, I2, T40, I2)
1006  format (1X, T5, A, T15, F8.3, T40, F8.3)
1007  format (1X, T5, A, T15, F8.3, T25, F8.3, T40, F8.3, T50, F8.3)
1008  format (1X, T5, A, T15, F8.3, T40, F8.3)
1009  format (1X, T3, A, T15, F12.3, T40, F12.3)
1010  format (1X, T9, 'CODE', T14, 'YEAR', T19, 'MONTH',
     & T25, 'DAY', T29, 'HOUR', T34, 'MIN', T38, 'SEC')
1011  format (1X, T3, I3, T9, A, T14, I4, T19, A, T25, I2, T29, I2, T34,
     & I2, T38, F5.2)
1012  format (/1X, A)
1015  format (1X, T2, 'CODE', T15, 'HOUR', T20, 'MIN',
     & T25, ' SEC', T33, ' RESID', T43, 'chr' , T48, 'cmn',
     & T53, 'csec', T60, 'delta', T70, 'baz', T77,'  slow')
1016  format (1X, T2, A, T7, A, T15, I2, T20, I2, T25,
     & F5.2, T33,  F6.2, T43, I2, T48, I2, T53, F5.2, 
     & T60, F6.2, T70, F5.1, T77, F8.4)
1017  format (1X, T2, A, T7, A, T20, F10.3, T32, F6.2, T48, F10.3, 
     & T60, F6.2, T70, F5.1)
c
*----------------------------------------------------------------------*------*
c
      return
      end
*--------------------------------------------------------------------- + ---- +
c                                                                     displke
      subroutine displke (stout, res, jgl,
     &                   LA, LN, D, S, lt, lg, dp, sc)
c
c     AUTHOR:  Genet M. Edmondson  RSES, ANU
c     DATE:    January 1987 
c     MODIFIED: B.L.N. Kennett March 1990  
c               to allow for changes to residual calculation
c               B.L.N. Kennett May 1991
c               to include slowness, azimuth data
c               B.L.N. Kennett Jan 1999 
c               shakeNA display
C               updated ellipticity corrections
c     PURPOSE:
c     * displays results from shake program
c
c     Subroutines and functions required:
c       cstaq - returns residual statistic for given location
c       (ydist, trtm, obst, month - used by cstat)
c
*----------------------------------------------------------------------*------*
c
c     PARAMETERS
c
      integer stout, res
c
      real    LA(*), LN(*), D(*), S(*)
      real    lt, lg, dp, sc
c
c     stout   unit number of standard output file
c     res     unit number of file to output results to
c     jgl     index for Residual Statistic
c     LA, LN, D, S
c             bounds on hypocentre location
c     lt, lg, dp, sc
c             hypocentre location
c
*----------------------------------------------------------------------*------*
c
c     COMMON BLOCK DECLARATIONS
      include 'shakcom.inc'
c
*----------------------------------------------------------------------*------*
c
c     VARIABLES
c
      integer  i, jgl
      integer  tmp, tmpmin, tmphrs
      integer  carmin, carhr
      integer  nc, charcn
c
      real     calct, delta, bazim
      real     tmpsec
      real     carsec
      real     resqkp, ressrc
      character*2 cjgl
c
c     i       loop counter
c     jgl     index for residual statistic
c     tmp etc temporary variables
c     carsec, carmin, carhr
c             calculated arrival times at stations
c     calct   theoretical travel time from source to receiver
c     delta   angular distance from source to receiver
c     trash   dummy variable
c     resqkp  residual statistic for results from shake program
c     ressrc  residual statistic for approx source
c
*----------------------------------------------------------------------*------*
c
c     FUNCTIONS
c
      real    cstaqke
c
c     cstaqke - returns residual statistic
c
*----------------------------------------------------------------------*------*
c
       logical lfa
       character*8 phase
       real edepth
c
c                                    Find residual statistics
      resqkp = cstaqke(stout, jgl, sc, lt, lg, dp)
      ressrc = cstaqke(stout, jgl, ssec, slat, slng, sdep)
c     
      If(jgl.eq.3) cjgl = "LI"      
      If(jgl.eq.2) cjgl = "JE"      
      If(jgl.eq.1) cjgl = "GA"      
            
c
      write(stout,1000) 'SOLUTION',cjgl
      write(stout,1001) source
      write(stout,1002) 'DATE:'
      write(stout,1003) 'Year', syr, syr
      write(stout,1004) 'Month', smo, smo
      write(stout,1005) 'Day', sday, sday
      write(stout,1005) 'Hour', shr, shr
      write(stout,1005) 'Minute', smin, smin
      write(stout,1006) 'Second', sc, ssec
      write(stout,1002) 'LOCATION:'
      write(stout,1008) 'Latitude', lt, slat
      write(stout,1008) 'Longitude', lg, slng
      write(stout,1008) 'Depth', dp, sdep
      write(stout,1009) 'RESIDUAL:', resqkp, ressrc
c

c
c     CALCULATE & ECHO ARRIVAL TIMES AT STATIONS FOR ORIGIN
c     AT CALCULATED SOLUTION
c
      rslat = (90.-lt)*0.017453292
      call kellref(rslat)
      write(stout,1012) 'Arrival Times for estimated hypocentre'
      write(stout,1015)
c                                 all main phases 
      call depset(dp,usrc)
      numtaz = numtim+numazi
      do 10, i = 1, numevt
      nc = charcn(evphcd(i))
c
c       CALCULATE TRAVEL TIME FROM SOLUTION TO STATION
c
        call ydist(lt, lg, stlat(evind(i)), stlong(evind(i)),
     ^             delta, cazim, bazim)
        cazim = cazim+180.
        if(cazim.gt.360.) cazim = cazim-360.
        call trtm(delta, MAXTT, n, tt,dtdd,dtdh,dddp,phcd)
        do 23 m=1,n
 23      continue
        if(nc.eq.1.and.evphcd(i)(1:1).eq.'P') then
          calct = tt(1)
          calcp = dtdd(1)
          write(res,*) i,' fast P'
        else
          do 21 l=1,n
            if(evphcd(i)(1:nc).eq.phcd(l)(1:nc)) then
              calct = tt(l)
              calcp = dtdd(l)
              write(res,*) i,nc,'  ',evphcd(i)
              go to 22
            endif
 21       continue
        endif
c
c       CALCULATE ACTUAL ARRIVAL TIME AT STATION
c       NB: this only takes into account crossing day, month and
c           year boundaries
c
c       tmpsec = ssec + calct
 22     continue
        edist = delta*0.017453292
        bazr = bazim*0.017453292
        phase = evphcd(i)(1:nc)
        call kellcor(phase,delta,edepth,rslat,bazim,etcor,lfa)
        calct = calct+etcor
        tmpsec = sc + calct
        tmpmin = tmpsec / 60
        carsec = tmpsec - (tmpmin * 60)
        tmp = smin + tmpmin
        tmphrs = tmp / 60
        carmin = tmp - (tmphrs * 60)
        carhr = shr + tmphrs
        if (i.le.numtim) then
          residf = obst(stout,sc,i)-calct
          write(stout,1016) evstcd(i),evphcd(i),evtmhr(i),evtmmi(i),
     &          evtmsc(i),residf,carhr,carmin,carsec,delta,bazim
        elseif (i.gt.numtim .and. i.le.numtaz) then
          resaz =  evtazi(i)-cazim         
          write(stout,1017) evstcd(i),evphcd(i),
     &         evtazi(i),resaz,cazim,delta,bazim
        elseif (i.gt.numtaz) then
          resslo =  evtslo(i)-calcp
          write(stout,1017) evstcd(i),evphcd(i),
     &         evtslo(i),resslo,calcp,delta,bazim
        endif
c
10      continue
c
*----------------------------------------------------------------------*------*
c
c     FORMAT STATEMENTS
c
1000  format (1X, T15, 'HYPOCENTRE ', A, T40, A)
1001  format (1X, T15, 'ShakeNA program', T40, A)
1002  format (1X, T3, A, A)
1003  format (1X, T5, A, T15, I4, T40, I4)
1004  format (1X, T5, A, T15, A, T40, A)
1005  format (1X, T5, A, T15, I2, T40, I2)
1006  format (1X, T5, A, T15, F8.3, T40, F8.3)
1007  format (1X, T5, A, T15, F8.3, T25, F8.3, T40, F8.3, T50, F8.3)
1008  format (1X, T5, A, T15, F8.3, T40, F8.3)
1009  format (1X, T3, A, T15, F12.3, T40, F12.3)
1010  format (1X, T9, 'CODE', T14, 'YEAR', T19, 'MONTH',
     & T25, 'DAY', T29, 'HOUR', T34, 'MIN', T38, 'SEC')
1011  format (1X, T3, I3, T9, A, T14, I4, T19, A, T25, I2, T29, I2, T34,
     & I2, T38, F5.2)
1012  format (/1X, A)
1015  format (1X, T2, 'CODE', T15, 'HOUR', T20, 'MIN',
     & T25, 'SEC', T33, 'RESID', T43, 'chr' , T48, 'cmn',
     & T53, 'csec', T60, 'delta', T70, 'baz')
1016  format (1X, T2, A, T7, A, T15, I2, T20, I2, T25,
     & F5.2, T33,  F5.2, T43, I2, T48, I2, T53, F5.2, 
     & T60, F6.2, T70, F5.1)
1017  format (1X, T2, A, T7, A, T20, F10.3, T32, F6.2, T48, F10.3, 
     & T60, F6.2, T70, F5.1)
c
*----------------------------------------------------------------------*------*
c
      return
      end
